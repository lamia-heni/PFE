package com.example.malware_detection;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import android.os.Handler;
import android.provider.Settings;
import android.util.Log;
import android.widget.Button;
import android.widget.TextView;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.viewpager2.widget.ViewPager2;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;


import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
public class MainActivity extends AppCompatActivity {

    private BroadcastReceiver appInstallReceiver;
    private boolean monitoringEnabled = false;

    private Button btnToggle;
    private TextView tvResult, tvStatus;
    ViewPager2 viewPager;
    List<ImageSliderItem> sliderItems = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        viewPager = findViewById(R.id.viewPager);

        sliderItems.add(new ImageSliderItem(R.drawable.slider1, "GUIDE DE BONNES PRATIQUES"));
        sliderItems.add(new ImageSliderItem(R.drawable.slider2, "CONSEILS ET ASSISTANCE"));
        sliderItems.add(new ImageSliderItem(R.drawable.slider3, "SÉCURITÉ ET INNOVATION"));

        viewPager.setAdapter(new ImageSliderAdapter(sliderItems));

        // Auto Slide
        new Handler().postDelayed(new Runnable() {
            int currentPage = 0;
            @Override
            public void run() {
                currentPage = (currentPage + 1) % sliderItems.size();
                viewPager.setCurrentItem(currentPage, true);
                new Handler().postDelayed(this, 4000);
            }
        }, 4000);
        btnToggle = findViewById(R.id.btnToggleMonitoring);
        tvResult = findViewById(R.id.tvResult);
        tvStatus = findViewById(R.id.tvStatus);

        btnToggle.setOnClickListener(v -> {
            monitoringEnabled = !monitoringEnabled;

            if (monitoringEnabled) {
                registerMonitoring();
                btnToggle.setText("Désactiver la surveillance");
                tvStatus.setText("Surveillance ACTIVÉE");
                tvStatus.setTextColor(Color.parseColor("#2E7D32")); // Vert foncé
            } else {
                unregisterMonitoring();
                btnToggle.setText("Activer la surveillance");
                tvStatus.setText("Surveillance DÉSACTIVÉE");
                tvStatus.setTextColor(Color.parseColor("#C62828")); // Rouge foncé
            }
        });
    }

    private void registerMonitoring() {
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_PACKAGE_ADDED);
        filter.addAction(Intent.ACTION_PACKAGE_REPLACED);
        filter.addDataScheme("package");

        appInstallReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                Uri data = intent.getData();
                if (data != null) {
                    String packageName = data.getSchemeSpecificPart();
                    try {
                        ApplicationInfo appInfo = getPackageManager().getApplicationInfo(packageName, 0);
                        String apkPath = appInfo.sourceDir;
                        sendApkToBackend(apkPath, packageName);
                    } catch (PackageManager.NameNotFoundException e) {
                        e.printStackTrace();
                    }
                }
            }
        };
        registerReceiver(appInstallReceiver, filter);
    }

    private void unregisterMonitoring() {
        try {
            if (appInstallReceiver != null) {
                unregisterReceiver(appInstallReceiver);
                appInstallReceiver = null;
            }
        } catch (IllegalArgumentException e) {
            Log.e("Receiver", "Déjà désenregistré");
        }
    }

    // ... (sendApkToBackend, showAlert, showDangerAlert restent inchangés)



    // Nouvelle signature de la méthode :
    private void sendApkToBackend(String apkPath, String packageName) {
        File apkFile = new File(apkPath);
        if (!apkFile.exists() || !apkFile.canRead()) {
            Log.e("APK", "Fichier APK introuvable ou illisible : " + apkPath);
            return;
        }

        OkHttpClient client = new OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.MINUTES)
                .writeTimeout(60, TimeUnit.MINUTES)
                .readTimeout(60, TimeUnit.MINUTES)
                .build();

        RequestBody requestBody = new MultipartBody.Builder()
                .setType(MultipartBody.FORM)
                .addFormDataPart("apk", apkFile.getName(),
                        RequestBody.create(apkFile, MediaType.parse("application/vnd.android.package-archive")))
                .build();

        Request request = new Request.Builder()
                .url("http://10.0.2.2:5000/analyze_apk")
                .post(requestBody)
                .build();

        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                runOnUiThread(() -> showAlert("Erreur", "Échec de l'envoi de l'APK au serveur."));
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    String responseBody = response.body().string();
                    try {
                        JSONObject jsonObject = new JSONObject(responseBody);
                        int prediction = jsonObject.getInt("prediction");

                        runOnUiThread(() -> {
                            if (prediction == 0) {
                                showDangerAlert("Résultat", "L'application est malveillante !", packageName);
                            } else {
                                showAlert("Résultat", "L'application est bénigne.");
                            }
                        });
                    } catch (JSONException e) {
                    }
                }
            }
        });
    }
    private void showAlert(String title, String message) {
        new AlertDialog.Builder(MainActivity.this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("OK", null)
                .show();
    }
    private void showDangerAlert(String title, String message, String packageName) {
        new AlertDialog.Builder(MainActivity.this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("Désinstaller", (dialog, which) -> {
                    Log.d("Uninstall", "Tentative de désinstallation du package : " + packageName);
                    Intent intent = new Intent(Intent.ACTION_UNINSTALL_PACKAGE);
                    intent.setData(Uri.parse("package:" + packageName));
                    intent.putExtra(Intent.EXTRA_RETURN_RESULT, true); // pour éventuellement capter un résultat
                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    startActivity(intent);

                })
                .setNegativeButton("Ignorer", null)
                .show();
    }
}